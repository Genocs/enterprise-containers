# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# *** Library variables ***
# DockerAcrConnection
# DockerAcrName
# PatNugetsFeed

trigger:
  - develop

resources:
  - repo: self

variables:
  # Container registry service connection established during pipeline creation
  #dockerRegistryServiceConnection: '4f6c8204-a494-44a8-ac0a-1f31ee63b23b'
  dockerRegistryServiceConnection: "Azure Container Registry"
  imageRepository: "promotionengine.webapi"
  containerRegistry: "uturegistry.azurecr.io"
  dockerfilePath: "$(Build.SourcesDirectory)/webapi.dockerfile"
  tag: "$(Build.BuildId)"
  imagePullSecret: "uturegistry4800e13a-auth"

  # Agent VM image name
  vmImageName: "ubuntu-latest"

  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: "review-app-$(System.PullRequest.PullRequestId)"

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: "$(dockerRegistryServiceConnection)"
              repository: "$(imageRepository)"
              command: "buildAndPush"
              Dockerfile: "**/webapi.dockerfile"
              # Add multiple tags to the image
              # Add tag to the image
              tags: |
                $(tag)
                latest
              additionalImageTags: |
                $(tag)
                latest
          - upload: azure-pipelines/manifests
            artifact: manifests

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build

    jobs:
      - deployment: Deploy
        condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
        displayName: Deploy
        pool:
          vmImage: $(vmImageName)
        environment: "Dev.utu-taxfree"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: "createSecret"
                    secretType: "dockerRegistry"
                    secretName: "$(imagePullSecret)"
                    dockerRegistryEndpoint: "$(dockerRegistryServiceConnection)"

                - task: KubernetesManifest@0
                  displayName: Deploy to Kubernetes cluster
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-webapi.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)
                # Add sleep to wait for the service to be available
                - script: sleep 30
                  displayName: Wait for the image to be available in the container registry

                - task: KubernetesManifest@0
                  displayName: Retry Deployment to k8s
                  inputs:
                    action: deploy
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-webapi.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)                      

      - deployment: DeployPullRequest
        displayName: Deploy Pull request
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
        pool:
          vmImage: $(vmImageName)

        environment: "Dev.$(k8sNamespaceForPR)"
        strategy:
          runOnce:
            deploy:
              steps:
                - reviewApp: utu-taxfree

                - task: Kubernetes@1
                  displayName: "Create a new namespace for the pull request"
                  inputs:
                    command: apply
                    useConfigurationFile: true
                    inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

                - task: KubernetesManifest@0
                  displayName: Create imagePullSecret
                  inputs:
                    action: "createSecret"
                    namespace: "$(k8sNamespaceForPR)"
                    secretType: "dockerRegistry"
                    secretName: "$(imagePullSecret)"
                    dockerRegistryEndpoint: "$(dockerRegistryServiceConnection)"

                - task: KubernetesManifest@0
                  displayName: Deploy to the new namespace in the Kubernetes cluster
                  inputs:
                    action: deploy
                    namespace: $(k8sNamespaceForPR)
                    manifests: |
                      $(Pipeline.Workspace)/manifests/deployment-webapi.yml
                      $(Pipeline.Workspace)/manifests/service.yml
                    imagePullSecrets: |
                      $(imagePullSecret)
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)

                - task: Kubernetes@1
                  name: get
                  displayName: "Get services in the new namespace"
                  continueOnError: true
                  inputs:
                    command: get
                    namespace: $(k8sNamespaceForPR)
                    arguments: svc
                    outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'

                # Getting the IP of the deployed service and writing it to a variable for posing comment
                - script: |
                    url="$(get.KubectlOutput)"
                    message="Your review app has been deployed"
                    if [ ! -z "$url" -a "$url" != "http://:" ]
                    then
                      message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
                    fi
                    echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"

#  - stage: DeployF2
#    displayName: Force Deploy stage
#    dependsOn: Deploy
#
#    jobs:
#      - deployment: Deploy
#        condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
#        displayName: Deploy
#        pool:
#          vmImage: $(vmImageName)
#        environment: "UTUIntegrationAirmiles.utu-taxfree"
#        strategy:
#          runOnce:
#            deploy:
#              steps:
#                - task: KubernetesManifest@0
#                  displayName: Create imagePullSecret
#                  inputs:
#                    action: "createSecret"
#                    secretType: "dockerRegistry"
#                    secretName: "$(imagePullSecret)"
#                    dockerRegistryEndpoint: "$(dockerRegistryServiceConnection)"
#
#                - task: KubernetesManifest@0
#                  displayName: Deploy to Kubernetes cluster
#                  inputs:
#                    action: deploy
#                    manifests: |
#                      $(Pipeline.Workspace)/manifests/deployment-webapi.yml
#                      $(Pipeline.Workspace)/manifests/service.yml
#                    imagePullSecrets: |
#                      $(imagePullSecret)
#                    containers: |
#                      $(containerRegistry)/$(imageRepository):$(tag)
